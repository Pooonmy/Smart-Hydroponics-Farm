[
    {
        "id": "e8d149bc9c4da7a2",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a546d2137de67d42",
        "type": "group",
        "z": "e8d149bc9c4da7a2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "44cfe960f22e7e64",
            "9795488aa6ca3b5b",
            "18d44b97b9a0d811",
            "b640f2f97675ea59",
            "4bac9b34fc097ce7",
            "b5bd1587313a3b05",
            "32c68303d41abbf9",
            "69d0285956ffe962",
            "fbd8ad6587420177",
            "80973a4e7a2f101a",
            "f0fb8564a7045095",
            "4040171536493897"
        ],
        "x": 34,
        "y": 39,
        "w": 872,
        "h": 322
    },
    {
        "id": "7527a0a4fe629de5",
        "type": "group",
        "z": "e8d149bc9c4da7a2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "319885f878f0790e",
            "92428f9dd63aa8c8",
            "01d1f47731fe70dd",
            "abf8e4df4d50fbe4",
            "15e14032c10d0683",
            "89d4ad38ab4ac52a",
            "1308b4fe4af63305",
            "2d46dd33cbe4a868",
            "a96f4e326ca6089c",
            "8f671a3888a46555",
            "f584193d226ee931",
            "9983417fbb9bf592",
            "c6ff98f40baee241",
            "3294c620b37ccbea",
            "03ed63041500478d"
        ],
        "x": 34,
        "y": 379,
        "w": 832,
        "h": 562
    },
    {
        "id": "534db5268dd98753",
        "type": "group",
        "z": "e8d149bc9c4da7a2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ee7aa99f60db8f97",
            "0069e6e3f86ed860",
            "30aaaf03d34a8ca4"
        ],
        "x": 34,
        "y": 959,
        "w": 812,
        "h": 82
    },
    {
        "id": "44cfe960f22e7e64",
        "type": "ui_gauge",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "",
        "group": "7551b8bbac97b81a",
        "order": 4,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "Ambient Temperature",
        "label": "Celcius / 째C",
        "format": "{{value | number:1}} 째C",
        "min": "-20",
        "max": "80",
        "colors": [
            "#10439f",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 80,
        "wires": []
    },
    {
        "id": "319885f878f0790e",
        "type": "ui_text",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "group": "102b6f980b4b111c",
        "order": 2,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Nutrient Pump",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "statuss",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#ffffff",
        "x": 760,
        "y": 420,
        "wires": []
    },
    {
        "id": "9795488aa6ca3b5b",
        "type": "ui_gauge",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "",
        "group": "7551b8bbac97b81a",
        "order": 5,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "Water Temperature",
        "label": "Celcius / 째C",
        "format": "{{value | number:1}} 째C",
        "min": "-20",
        "max": "80",
        "colors": [
            "#10439f",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "18d44b97b9a0d811",
        "type": "ui_gauge",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "",
        "group": "7551b8bbac97b81a",
        "order": 2,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "EC Level",
        "label": "mS/cm",
        "format": "{{value | number :2}}",
        "min": 0,
        "max": "6",
        "colors": [
            "#e6e600",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 740,
        "y": 260,
        "wires": []
    },
    {
        "id": "b640f2f97675ea59",
        "type": "ui_gauge",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "",
        "group": "7551b8bbac97b81a",
        "order": 1,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "Water Level",
        "label": "Percent / %",
        "format": "{{value | number:0}} %",
        "min": 0,
        "max": "100",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 750,
        "y": 320,
        "wires": []
    },
    {
        "id": "92428f9dd63aa8c8",
        "type": "mqtt in",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "",
        "topic": "projectHydro5/statusWarning",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6cd71b44ad8b3bb5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 620,
        "wires": [
            [
                "01d1f47731fe70dd",
                "abf8e4df4d50fbe4",
                "f584193d226ee931",
                "9983417fbb9bf592",
                "15e14032c10d0683",
                "8f671a3888a46555"
            ]
        ]
    },
    {
        "id": "01d1f47731fe70dd",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "checkNutrientPumpStatus",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.payload = values[0]; // Set the output payload to the array of float values\nif (msg.payload == 0) {\n    msg.payload = `Active`\n}\nelse if (msg.payload == 1) {\n    msg.payload = `Standing by`\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 420,
        "wires": [
            [
                "319885f878f0790e"
            ]
        ]
    },
    {
        "id": "abf8e4df4d50fbe4",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "checkWaterPumpStatus",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.payload = values[1]; // Set the output payload to the array of float values\nif (msg.payload == 0) {\n    msg.payload = `Active`\n}\nelse if (msg.payload == 1) {\n    msg.payload = `Standing by`\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 500,
        "wires": [
            [
                "89d4ad38ab4ac52a"
            ]
        ]
    },
    {
        "id": "ee7aa99f60db8f97",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "534db5268dd98753",
        "name": "checkVegTypeStatus",
        "func": "if (msg.payload == 1) {\n    msg.payload = `Thai vegetables`\n}\nelse if (msg.payload == 0) {\n    msg.payload = `Salads`\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1000,
        "wires": [
            [
                "0069e6e3f86ed860"
            ]
        ]
    },
    {
        "id": "15e14032c10d0683",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "checkGrowLightStatus",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.payload = values[3]; // Set the output payload to the array of float values\nif (msg.payload == 0) {\n    msg.payload = `Active`\n}\nelse if (msg.payload == 1) {\n    msg.payload = `Standing by`\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 660,
        "wires": [
            [
                "1308b4fe4af63305"
            ]
        ]
    },
    {
        "id": "89d4ad38ab4ac52a",
        "type": "ui_text",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "group": "102b6f980b4b111c",
        "order": 3,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Water Pump",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "statuss",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#ffffff",
        "x": 750,
        "y": 500,
        "wires": []
    },
    {
        "id": "0069e6e3f86ed860",
        "type": "ui_text",
        "z": "e8d149bc9c4da7a2",
        "g": "534db5268dd98753",
        "group": "102b6f980b4b111c",
        "order": 1,
        "width": 5,
        "height": 4,
        "name": "",
        "label": "Vegetable Type",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "vegTypeClass",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#ffffff",
        "x": 740,
        "y": 1000,
        "wires": []
    },
    {
        "id": "1308b4fe4af63305",
        "type": "ui_text",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "group": "102b6f980b4b111c",
        "order": 5,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Grow Light",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "statuss",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#ffffff",
        "x": 750,
        "y": 660,
        "wires": []
    },
    {
        "id": "2d46dd33cbe4a868",
        "type": "ui_text",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "group": "5568d5d1aa7ef2e5",
        "order": 1,
        "width": 5,
        "height": 4,
        "name": "",
        "label": "Water Level",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "warnClass",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 750,
        "y": 740,
        "wires": []
    },
    {
        "id": "adbbf99ddcb87885",
        "type": "ui_template",
        "z": "e8d149bc9c4da7a2",
        "group": "f52dea77a8aac6d0",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<style>\n    /*Main background*/\n    body {\n        background: -webkit-linear-gradient(\n             55deg,\n             #35495e 0%,\n             #347474 25%,\n             #42b883 100%\n             );\n        -webkit-touch-callout: none !important;\n    }\n    \n    ui-card-panel {\n        background-color: rgba(255, 255, 255, 0.1) !important;\n        border-radius: 10px !important;\n    \n    }\n    \n    .nr-dashboard-theme ui-card-panel {\n     border: none !important;\n    \n    }\n   \n    md-card{\n    background-color: rgba(255, 255, 255, 0.1) !important;\n    border-radius: 10px !important;\n    \n    }\n\n    .nr-dashboard-cardtitle{\n        font-size:150% !important;\n    }\n    md-toolbar-tools{\n        background-color: rgba(255, 255, 255, 0.3) !important;\n    }\n    \n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1300,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "0736bf5066cd814c",
        "type": "ui_template",
        "z": "e8d149bc9c4da7a2",
        "group": "5568d5d1aa7ef2e5",
        "name": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .warnClass{\n        background-color: rgba(233, 200, 116 , 0.5) !important;\n        border-radius: 10px !important;\n    }\n    .vegTypeClass{\n        background-color: rgba(175, 130, 96 , 0.5) !important;\n        border-radius: 10px !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b7b6573eced89bc4",
        "type": "ui_template",
        "z": "e8d149bc9c4da7a2",
        "group": "5568d5d1aa7ef2e5",
        "name": "",
        "order": 3,
        "width": 5,
        "height": 4,
        "format": "<div style=\"display: flex; justify-content: center; align-items: center;\">\n    <img src = \"https://cdn.discordapp.com/emojis/881844302010015774.gif?size=128&quality=lossless\" width=\"240\" height=\"240\">\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a96f4e326ca6089c",
        "type": "ui_text",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "group": "5568d5d1aa7ef2e5",
        "order": 2,
        "width": 5,
        "height": 4,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "warnClass",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 730,
        "y": 820,
        "wires": []
    },
    {
        "id": "4bac9b34fc097ce7",
        "type": "ui_chart",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "",
        "group": "7551b8bbac97b81a",
        "order": 6,
        "width": 6,
        "height": 6,
        "label": "Temperature Chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#2ca02c",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8f671a3888a46555",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "checkWaterWarning",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.payload = values[4]; // Set the output payload to the array of float values\nif (msg.payload == 0) {\n    msg.payload = `Normal`\n}\nelse if (msg.payload == 1) {\n    msg.payload = `OVERFLOW`\n}\nelse if (msg.payload == -1) {\n    msg.payload = `LOW`\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 740,
        "wires": [
            [
                "2d46dd33cbe4a868"
            ]
        ]
    },
    {
        "id": "f584193d226ee931",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "checkTempWarning",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.payload = values[5]; // Set the output payload to the array of float values\nif (msg.payload == 0) {\n    msg.payload = `Normal`\n}\nelse if (msg.payload == 1) {\n    msg.payload = `TOO HIGH`\n}\nelse if (msg.payload == -1) {\n    msg.payload = `TOO LOW`\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 820,
        "wires": [
            [
                "a96f4e326ca6089c"
            ]
        ]
    },
    {
        "id": "b5bd1587313a3b05",
        "type": "ui_chart",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "",
        "group": "7551b8bbac97b81a",
        "order": 3,
        "width": 6,
        "height": 6,
        "label": "EC Level Chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff7f0e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "32c68303d41abbf9",
        "type": "mqtt in",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "",
        "topic": "projectHydro5/sensorsData",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6cd71b44ad8b3bb5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "fbd8ad6587420177",
                "80973a4e7a2f101a",
                "f0fb8564a7045095",
                "4040171536493897"
            ]
        ]
    },
    {
        "id": "69d0285956ffe962",
        "type": "ui_button",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "",
        "group": "7551b8bbac97b81a",
        "order": 8,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Clear Chart",
        "tooltip": "",
        "color": "black",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "4bac9b34fc097ce7",
                "b5bd1587313a3b05"
            ]
        ]
    },
    {
        "id": "fbd8ad6587420177",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "extractWaterLevel",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.payload = values[3]; // Set the output payload to the array of float values\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 320,
        "wires": [
            [
                "b640f2f97675ea59"
            ]
        ]
    },
    {
        "id": "80973a4e7a2f101a",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "extractEcValue",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.topic = \"EC Value\"\nmsg.payload = values[2]; // Set the output payload to the array of float values\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "b5bd1587313a3b05",
                "18d44b97b9a0d811"
            ]
        ]
    },
    {
        "id": "f0fb8564a7045095",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "extractWaterTemp",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.topic = \"Water Temp\"\nmsg.payload = values[0]; // Set the output payload to the array of float values\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 160,
        "wires": [
            [
                "9795488aa6ca3b5b",
                "4bac9b34fc097ce7"
            ]
        ]
    },
    {
        "id": "4040171536493897",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "a546d2137de67d42",
        "name": "extractAmbientTemp",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.topic = \"Ambient Temp\"\nmsg.payload = values[1]; // Set the output payload to the array of float values\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "44cfe960f22e7e64",
                "4bac9b34fc097ce7"
            ]
        ]
    },
    {
        "id": "30aaaf03d34a8ca4",
        "type": "mqtt in",
        "z": "e8d149bc9c4da7a2",
        "g": "534db5268dd98753",
        "name": "",
        "topic": "projectHydro5/vegTypeStatus",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6cd71b44ad8b3bb5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1000,
        "wires": [
            [
                "ee7aa99f60db8f97"
            ]
        ]
    },
    {
        "id": "9983417fbb9bf592",
        "type": "function",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "checkOxygenPumpStatus",
        "func": "var input = msg.payload; // Assuming the input is in msg.payload\n\n// Remove any leading or trailing whitespace\ninput = input.trim();\n\n// Split the input string using commas as the delimiter\nvar values = input.split(',');\n\n// Remove leading and trailing whitespace from each value and convert to float\nvalues = values.map(function (value) {\n    return parseFloat(value.trim());\n});\n\nmsg.payload = values[2]; // Set the output payload to the array of float values\nif (msg.payload == 0) {\n    msg.payload = `Active`\n}\nelse if (msg.payload == 1) {\n    msg.payload = `Standing by`\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 580,
        "wires": [
            [
                "c6ff98f40baee241"
            ]
        ]
    },
    {
        "id": "c6ff98f40baee241",
        "type": "ui_text",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "group": "102b6f980b4b111c",
        "order": 4,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Oxygen Pump",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "statuss",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#ffffff",
        "x": 760,
        "y": 580,
        "wires": []
    },
    {
        "id": "3294c620b37ccbea",
        "type": "ui_button",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "",
        "group": "102b6f980b4b111c",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Toggle vegetable type",
        "tooltip": "",
        "color": "white",
        "bgcolor": "green",
        "className": "vegTypeClass",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 500,
        "y": 900,
        "wires": [
            [
                "03ed63041500478d"
            ]
        ]
    },
    {
        "id": "03ed63041500478d",
        "type": "mqtt out",
        "z": "e8d149bc9c4da7a2",
        "g": "7527a0a4fe629de5",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "x": 710,
        "y": 900,
        "wires": []
    },
    {
        "id": "7551b8bbac97b81a",
        "type": "ui_group",
        "name": "Sensors Monitor",
        "tab": "05d54bafd82b555d",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "102b6f980b4b111c",
        "type": "ui_group",
        "name": "Status",
        "tab": "05d54bafd82b555d",
        "order": 2,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6cd71b44ad8b3bb5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5568d5d1aa7ef2e5",
        "type": "ui_group",
        "name": "Warning",
        "tab": "05d54bafd82b555d",
        "order": 3,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f52dea77a8aac6d0",
        "type": "ui_group",
        "name": "Test",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "05d54bafd82b555d",
        "type": "ui_tab",
        "name": "Hypostasis",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]